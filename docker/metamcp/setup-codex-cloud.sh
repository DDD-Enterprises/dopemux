#!/usr/bin/env bash

# Setup script for Codex Cloud container environment (MetaMCP stack)
# - Generates an env file for docker compose
# - Validates/creates required secrets
# - Optionally brings the stack up

set -euo pipefail

SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
WORKDIR="$SCRIPT_DIR"
ENV_FILE="$WORKDIR/.env"
COMPOSE_FILE="$WORKDIR/docker-compose.metamcp.yml"

usage() {
  cat <<EOF
Usage: $(basename "$0") [--up] [--print]

Actions:
  --up      Write env file and run: docker compose --env-file .env -f docker-compose.metamcp.yml up -d
  --print   Print resolved env values after writing .env (secrets masked)

This script writes $ENV_FILE with sane defaults and your existing environment variables:
  - Required: OPENAI_API_KEY (for basic functionality)
  - Strongly recommended: ANTHROPIC_API_KEY, EXA_API_KEY
  - Optional provider keys: DEEPSEEK_API_KEY, GROQ_API_KEY, OPENROUTER_API_KEY, XAI_API_KEY,
    GEMINI_API_KEY, AZURE_OPENAI_API_KEY, MISTRAL_API_KEY, CONTEXT7_API_KEY, VOYAGEAI_API_KEY,
    PERPLEXITY_API_KEY, GITHUB_TOKEN

MetaMCP core settings (defaults may be overridden via environment):
  APP_URL, NEXTAUTH_URL (default http://localhost:12008)
  NEXTAUTH_SECRET (autogenerated if absent)
  DATABASE_URL (default points at internal Postgres service)
EOF
}

mask() {
  local v="$1"
  if [[ -z "$v" ]]; then echo ""; return; fi
  local len=${#v}
  if (( len <= 8 )); then printf '%*s' "$len" '' | tr ' ' '*'; else echo "${v:0:4}***${v: -4}"; fi
}

want_up=false
want_print=false
for arg in "$@"; do
  case "$arg" in
    -h|--help) usage; exit 0 ;;
    --up) want_up=true ;;
    --print) want_print=true ;;
    *) echo "Unknown arg: $arg" >&2; usage; exit 2 ;;
  esac
done

mkdir -p "$WORKDIR"

# Resolve core URLs
APP_URL_DEFAULT="${APP_URL:-${PUBLIC_URL:-http://localhost:12008}}"
NEXTAUTH_URL_DEFAULT="${NEXTAUTH_URL:-$APP_URL_DEFAULT}"

# Generate NEXTAUTH_SECRET if missing
if [[ -z "${NEXTAUTH_SECRET:-}" ]]; then
  if command -v openssl >/dev/null 2>&1; then
    NEXTAUTH_SECRET="$(openssl rand -base64 32 | tr -d '\n' | tr '/+' 'AB')"
  else
    NEXTAUTH_SECRET="$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 48 || true)"
  fi
fi

# Default DB points to internal service in compose
DATABASE_URL_DEFAULT="${DATABASE_URL:-postgresql://metamcp:metamcp_secure_2024@metamcp-postgres:5432/metamcp}"

# Provider/API keys (read from current env if present)
PROVIDER_VARS=(
  OPENAI_API_KEY
  DEEPSEEK_API_KEY
  GROQ_API_KEY
  OPENROUTER_API_KEY
  XAI_API_KEY
  GEMINI_API_KEY
  AZURE_OPENAI_API_KEY
  MISTRAL_API_KEY
  CONTEXT7_API_KEY
  EXA_API_KEY
  VOYAGEAI_API_KEY
  PERPLEXITY_API_KEY
  GITHUB_TOKEN
)

# Feature flags and tuning
ENABLE_AUTH_DEFAULT="${ENABLE_AUTH:-true}"
ENABLE_API_KEYS_DEFAULT="${ENABLE_API_KEYS:-true}"
ENABLE_MONITORING_DEFAULT="${ENABLE_MONITORING:-true}"
ENABLE_METRICS_DEFAULT="${ENABLE_METRICS:-true}"

RESPONSE_TIMEOUT_DEFAULT="${RESPONSE_TIMEOUT:-30000}"
MAX_CONCURRENT_REQUESTS_DEFAULT="${MAX_CONCURRENT_REQUESTS:-10}"
ENABLE_CIRCUIT_BREAKER_DEFAULT="${ENABLE_CIRCUIT_BREAKER:-true}"
ENABLE_REQUEST_QUEUING_DEFAULT="${ENABLE_REQUEST_QUEUING:-true}"

LOG_LEVEL_DEFAULT="${LOG_LEVEL:-INFO}"
ENABLE_REQUEST_LOGGING_DEFAULT="${ENABLE_REQUEST_LOGGING:-true}"
ENABLE_ERROR_TRACKING_DEFAULT="${ENABLE_ERROR_TRACKING:-true}"

# Validate minimal requirements
missing=()
if [[ -z "${OPENAI_API_KEY:-}" ]]; then missing+=("OPENAI_API_KEY"); fi

if (( ${#missing[@]} )); then
  echo "[warn] Missing recommended variable(s): ${missing[*]}" >&2
  echo "       The stack can start, but some features may not work."
fi

cat > "$ENV_FILE" <<EOF
# Generated by setup-codex-cloud.sh
APP_URL=$APP_URL_DEFAULT
DATABASE_URL=$DATABASE_URL_DEFAULT
NEXTAUTH_SECRET=$NEXTAUTH_SECRET
NEXTAUTH_URL=$NEXTAUTH_URL_DEFAULT

# API keys (leave blank if not used)
EOF

for var in "${PROVIDER_VARS[@]}"; do
  printf '%s=%s\n' "$var" "${!var-}" >> "$ENV_FILE"
done

cat >> "$ENV_FILE" <<EOF

# Feature flags
ENABLE_AUTH=$ENABLE_AUTH_DEFAULT
ENABLE_API_KEYS=$ENABLE_API_KEYS_DEFAULT
ENABLE_MONITORING=$ENABLE_MONITORING_DEFAULT
ENABLE_METRICS=$ENABLE_METRICS_DEFAULT

# Tuning
RESPONSE_TIMEOUT=$RESPONSE_TIMEOUT_DEFAULT
MAX_CONCURRENT_REQUESTS=$MAX_CONCURRENT_REQUESTS_DEFAULT
ENABLE_CIRCUIT_BREAKER=$ENABLE_CIRCUIT_BREAKER_DEFAULT
ENABLE_REQUEST_QUEUING=$ENABLE_REQUEST_QUEUING_DEFAULT

# Logging
LOG_LEVEL=$LOG_LEVEL_DEFAULT
ENABLE_REQUEST_LOGGING=$ENABLE_REQUEST_LOGGING_DEFAULT
ENABLE_ERROR_TRACKING=$ENABLE_ERROR_TRACKING_DEFAULT
EOF

echo "[ok] Wrote env file: $ENV_FILE"

if $want_print; then
  echo ""; echo "Resolved values (masked):"
  printf '  %-28s %s\n' "APP_URL" "$APP_URL_DEFAULT"
  printf '  %-28s %s\n' "NEXTAUTH_URL" "$NEXTAUTH_URL_DEFAULT"
  printf '  %-28s %s\n' "NEXTAUTH_SECRET" "$(mask "$NEXTAUTH_SECRET")"
  printf '  %-28s %s\n' "DATABASE_URL" "$DATABASE_URL_DEFAULT"
  for var in "${PROVIDER_VARS[@]}"; do
    printf '  %-28s %s\n' "$var" "$(mask "${!var-}")"
  done
fi

if $want_up; then
  if ! command -v docker-compose >/dev/null 2>&1 && ! command -v docker >/dev/null 2>&1; then
    echo "[error] Docker/Compose not found. Install Docker Desktop or docker-compose." >&2
    exit 1
  fi
  # Prefer docker compose v2 if available
  if command -v docker >/dev/null 2>&1; then
    echo "[info] Starting stack with: docker compose --env-file $ENV_FILE -f $COMPOSE_FILE up -d"
    docker compose --env-file "$ENV_FILE" -f "$COMPOSE_FILE" up -d
  else
    echo "[info] Starting stack with: docker-compose --env-file $ENV_FILE -f $COMPOSE_FILE up -d"
    docker-compose --env-file "$ENV_FILE" -f "$COMPOSE_FILE" up -d
  fi
fi

