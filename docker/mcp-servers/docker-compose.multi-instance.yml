# Dopemux MCP Servers - Multi-Instance Docker Orchestration
# Usage:
#   1. Copy .env.template to .env and configure DOPEMUX_INSTANCE and PORT_BASE
#   2. docker-compose -f docker-compose.multi-instance.yml up -d
#
# Examples:
#   Instance 1: DOPEMUX_INSTANCE=default PORT_BASE=3000
#   Instance 2: DOPEMUX_INSTANCE=dev PORT_BASE=3030
#   Instance 3: DOPEMUX_INSTANCE=staging PORT_BASE=3060

services:
  # === CRITICAL PATH SERVERS (Priority: High) ===

  # Context7 - ALWAYS FIRST for documentation and API references
  context7:
    image: mcp/context7:latest
    container_name: ${CONTAINER_PREFIX:-mcp}-context7
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - CONTEXT7_API_KEY=${CONTEXT7_API_KEY}
      - CONTEXT7_ENDPOINT=${CONTEXT7_ENDPOINT}
    ports:
      - "${PORT_BASE:-3000}2:8080"  # PORT_BASE + 2
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8080"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s
    volumes:
      - mcp_shared_context7_cache:/app/cache
    labels:
      - "mcp.role=critical_path"
      - "mcp.priority=highest"
      - "mcp.description=Documentation and API references"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # Zen - Multi-model orchestration and complex decision making
  zen:
    build:
      context: ./zen
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-zen
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DISABLED_TOOLS=analyze,refactor,testgen,secaudit,docgen,tracer
      - DEFAULT_MODEL=auto
      - MCP_SERVER_PORT=${PORT_BASE:-3000}3
    ports:
      - "${PORT_BASE:-3000}3:${PORT_BASE:-3000}3"  # PORT_BASE + 3
    working_dir: /app
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s
    volumes:
      - ${VOLUME_PREFIX:-mcp}_zen_logs:/app/logs
      - ${VOLUME_PREFIX:-mcp}_zen_config:/app/conf
    labels:
      - "mcp.role=critical_path"
      - "mcp.priority=highest"
      - "mcp.description=Multi-model orchestration"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # Sequential Thinking - Multi-step reasoning and architectural analysis
  mas-sequential-thinking:
    build:
      context: ./mcp-server-mas-sequential-thinking
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-mas-sequential-thinking
    restart: unless-stopped
    networks:
      - mcp-network
    env_file:
      - ./mcp-server-mas-sequential-thinking/.env
    environment:
      - MCP_SERVER_PORT=${PORT_BASE:-3000}1
    ports:
      - "${PORT_BASE:-3000}1:${PORT_BASE:-3000}1"  # PORT_BASE + 1
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s
    volumes:
      - ${VOLUME_PREFIX:-mcp}_logs:/app/logs
      - ${VOLUME_PREFIX:-mcp}_cache:/app/cache
    labels:
      - "mcp.role=critical_path"
      - "mcp.priority=high"
      - "mcp.description=Multi-step reasoning and analysis"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # === WORKFLOW SERVERS (Priority: Medium) ===

  # ConPort - Project memory and decision tracking
  conport:
    build:
      context: ./conport
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-conport
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - MCP_SERVER_PORT=${PORT_BASE:-3000}4
    ports:
      - "${PORT_BASE:-3000}4:${PORT_BASE:-3000}4"  # PORT_BASE + 4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_BASE:-3000}4/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s
    volumes:
      - ${VOLUME_PREFIX:-mcp}_conport_data:/app/data
      - mcp_shared_dopemux_sessions:/workspace/.dopemux
      - mcp_shared_claude_sessions:/workspace/.claude
    labels:
      - "mcp.role=workflow"
      - "mcp.priority=medium"
      - "mcp.description=Project memory and decision tracking"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # Task Master AI - Task management and PRD processing
  task-master-ai:
    build:
      context: ./task-master-ai
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-task-master-ai
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - MCP_SERVER_PORT=${PORT_BASE:-3000}5
    ports:
      - "${PORT_BASE:-3000}5:${PORT_BASE:-3000}5"  # PORT_BASE + 5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_BASE:-3000}5/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s
    volumes:
      - ${VOLUME_PREFIX:-mcp}_task_master_data:/app/data
      - mcp_shared_dopemux_sessions:/workspace/.dopemux
      - mcp_shared_claude_sessions:/workspace/.claude
    labels:
      - "mcp.role=workflow"
      - "mcp.priority=medium"
      - "mcp.description=Task management and PRD processing"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # Serena - Code navigation, refactoring, LSP functionality
  serena:
    build:
      context: ./serena
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-serena
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - MCP_SERVER_PORT=${PORT_BASE:-3000}6
    ports:
      - "${PORT_BASE:-3000}6:${PORT_BASE:-3000}6"  # PORT_BASE + 6
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PORT_BASE:-3000}6/health || exit 1"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 60s
    volumes:
      - ${VOLUME_PREFIX:-mcp}_serena_data:/app/data
    labels:
      - "mcp.role=workflow"
      - "mcp.priority=medium"
      - "mcp.description=Code navigation and refactoring"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # Milvus dependencies
  etcd:
    container_name: ${CONTAINER_PREFIX:-mcp}-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - mcp_shared_etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mcp-network
    labels:
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  minio:
    container_name: ${CONTAINER_PREFIX:-mcp}-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "${PORT_BASE:-3000}15:9001"  # PORT_BASE + 15 for console
      - "${PORT_BASE:-3000}16:9000"  # PORT_BASE + 16 for API
    volumes:
      - mcp_shared_minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mcp-network
    labels:
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # Milvus - Vector database for claude-context
  milvus:
    image: milvusdb/milvus:latest
    container_name: ${CONTAINER_PREFIX:-mcp}-milvus
    restart: unless-stopped
    networks:
      - mcp-network
    ports:
      - "${PORT_BASE:-3000}17:19530"  # PORT_BASE + 17
      - "${PORT_BASE:-3000}18:9091"   # PORT_BASE + 18
    volumes:
      - mcp_shared_milvus_data:/var/lib/milvus
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    command: milvus run standalone
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9091/healthz || exit 1"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 90s
    labels:
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # Claude Context - Semantic code search within repositories
  claude-context:
    build:
      context: ./claude-context
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-claude-context
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - EMBEDDING_PROVIDER=VoyageAI
      - EMBEDDING_MODEL=voyage-code-3
      - VOYAGEAI_API_KEY=${VOYAGEAI_API_KEY}
      - VOYAGEAI_RERANK_MODEL=rerank-2.5
      - MILVUS_ADDRESS=milvus:19530
      - MILVUS_TOKEN=
      - MCP_SERVER_PORT=${PORT_BASE:-3000}7
    ports:
      - "${PORT_BASE:-3000}7:${PORT_BASE:-3000}7"  # PORT_BASE + 7
    depends_on:
      milvus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PORT_BASE:-3000}7/health || exit 1"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 60s
    volumes:
      - mcp_shared_claude_context_data:/app/data
      - mcp_shared_claude_context_cache:/root/.context
      - mcp_shared_dopemux_sessions:/workspace/.dopemux
      - mcp_shared_claude_sessions:/workspace/.claude
      - ${WORKTREE_PATH:-/Users/hue/code/dopemux-mvp}:/workspace/dopemux-mvp:ro
    labels:
      - "mcp.role=research"
      - "mcp.priority=medium"
      - "mcp.description=Semantic code search"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # === RESEARCH SERVERS (Priority: Low - Fallback Only) ===

  # Exa - Web research (ONLY when context7 lacks information)
  exa:
    build:
      context: ./exa
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-exa
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - EXA_API_KEY=${EXA_API_KEY}
      - MCP_SERVER_PORT=${PORT_BASE:-3000}8
    ports:
      - "${PORT_BASE:-3000}8:${PORT_BASE:-3000}8"  # PORT_BASE + 8
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PORT_BASE:-3000}8/health || exit 1"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s
    labels:
      - "mcp.role=research"
      - "mcp.priority=low"
      - "mcp.description=Web research fallback"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # === QUALITY & UTILITY SERVERS (Priority: Medium) ===

  # MorphLLM Fast Apply - Pattern-based transformations and bulk edits
  morphllm-fast-apply:
    build:
      context: ./morphllm-fast-apply
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-morphllm-fast-apply
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - MCP_SERVER_PORT=${PORT_BASE:-3000}11
    ports:
      - "${PORT_BASE:-3000}11:${PORT_BASE:-3000}11"  # PORT_BASE + 11
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_BASE:-3000}11/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s
    labels:
      - "mcp.role=quality"
      - "mcp.priority=medium"
      - "mcp.description=Pattern-based transformations and bulk edits"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

  # Desktop Commander - Desktop automation and system control
  desktop-commander:
    build:
      context: ./desktop-commander
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-mcp}-desktop-commander
    restart: unless-stopped
    networks:
      - mcp-network
    environment:
      - MCP_SERVER_PORT=${PORT_BASE:-3000}12
      - DISPLAY=${DISPLAY:-:0}
    ports:
      - "${PORT_BASE:-3000}12:${PORT_BASE:-3000}12"  # PORT_BASE + 12
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - /tmp:/tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_BASE:-3000}12/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s
    labels:
      - "mcp.role=utility"
      - "mcp.priority=medium"
      - "mcp.description=Desktop automation and system control"
      - "mcp.instance=${DOPEMUX_INSTANCE:-default}"

# === NETWORKS ===
networks:
  mcp-network:
    driver: bridge
    name: ${NETWORK_NAME:-mcp-network-default}
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}

# === VOLUMES ===
volumes:
  # === SHARED VOLUMES (across all instances) ===
  # Code indexing and semantic search data - shared for efficiency
  mcp_shared_claude_context_data:
    driver: local
    name: mcp_shared_claude_context_data
  mcp_shared_claude_context_cache:
    driver: local
    name: mcp_shared_claude_context_cache

  # Vector database - shared for code embeddings
  mcp_shared_milvus_data:
    driver: local
    name: mcp_shared_milvus_data
  mcp_shared_etcd_data:
    driver: local
    name: mcp_shared_etcd_data
  mcp_shared_minio_data:
    driver: local
    name: mcp_shared_minio_data

  # Documentation and API reference cache - shared for efficiency
  mcp_shared_context7_cache:
    driver: local
    name: mcp_shared_context7_cache

  # Session state and context - shared for cross-instance continuity
  mcp_shared_dopemux_sessions:
    driver: local
    name: mcp_shared_dopemux_sessions
  mcp_shared_claude_sessions:
    driver: local
    name: mcp_shared_claude_sessions

  # === INSTANCE-SPECIFIC VOLUMES ===
  # Logs and configs - isolated per instance
  ${VOLUME_PREFIX:-mcp}_logs:
    driver: local
    name: ${VOLUME_PREFIX:-mcp}_logs
  ${VOLUME_PREFIX:-mcp}_cache:
    driver: local
    name: ${VOLUME_PREFIX:-mcp}_cache
  ${VOLUME_PREFIX:-mcp}_zen_logs:
    driver: local
    name: ${VOLUME_PREFIX:-mcp}_zen_logs
  ${VOLUME_PREFIX:-mcp}_zen_config:
    driver: local
    name: ${VOLUME_PREFIX:-mcp}_zen_config

  # Project memory and decisions - isolated per instance
  ${VOLUME_PREFIX:-mcp}_conport_data:
    driver: local
    name: ${VOLUME_PREFIX:-mcp}_conport_data
  ${VOLUME_PREFIX:-mcp}_task_master_data:
    driver: local
    name: ${VOLUME_PREFIX:-mcp}_task_master_data
  ${VOLUME_PREFIX:-mcp}_serena_data:
    driver: local
    name: ${VOLUME_PREFIX:-mcp}_serena_data
