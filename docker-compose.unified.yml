# Dopemux Unified Architecture - Single Master Configuration
# Consolidates all services under one orchestration system
# Based on ADHD Two-Plane Architecture with clear authority boundaries

version: '3.8'

services:
  # ===================================================================
  # SHARED INFRASTRUCTURE LAYER
  # ===================================================================

  # Primary Redis - Event Bus & General Cache
  redis-primary:
    image: redis:7-alpine
    container_name: dopemux-redis-primary
    ports:
      - "6379:6379"
    volumes:
      - redis_primary_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - dopemux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Secondary Redis - Leantime Specific
  redis-leantime:
    image: redis:7-alpine
    container_name: dopemux-redis-leantime
    ports:
      - "6380:6379"  # Different port to avoid conflict
    volumes:
      - redis_leantime_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dopemux_redis}
    networks:
      - dopemux-network
    restart: unless-stopped

  # Primary PostgreSQL - Unified Database
  postgres-primary:
    image: postgres:16-alpine
    container_name: dopemux-postgres-primary
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: dopemux_unified
      POSTGRES_USER: dopemux
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dopemux_secure_2024}
      POSTGRES_MULTIPLE_DATABASES: "dopemux_memory,leantime,conport,metamcp"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sql:/docker-entrypoint-initdb.d/init-multiple-databases.sql
    networks:
      - dopemux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dopemux -d dopemux_unified"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL for Leantime (required dependency)
  mysql-leantime:
    image: mysql:8.0
    container_name: dopemux-mysql-leantime
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-dopemux_mysql_root_2024}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-leantime}
      MYSQL_USER: ${MYSQL_USER:-leantime}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-leantime_secure_2024}
    command: >
      --character-set-server=UTF8MB4
      --collation-server=UTF8MB4_unicode_ci
      --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql_leantime_data:/var/lib/mysql
    networks:
      - dopemux-network
    restart: unless-stopped

  # ===================================================================
  # VECTOR & SEARCH INFRASTRUCTURE
  # ===================================================================

  # Milvus Vector Database Infrastructure
  milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: dopemux-milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - milvus_etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - dopemux-network
    restart: unless-stopped

  milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: dopemux-milvus-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"  # Console
      - "9000:9000"  # API
    volumes:
      - milvus_minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    networks:
      - dopemux-network
    restart: unless-stopped

  milvus-standalone:
    image: milvusdb/milvus:v2.4.16
    container_name: dopemux-milvus-standalone
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_data:/var/lib/milvus
    depends_on:
      - milvus-etcd
      - milvus-minio
    networks:
      - dopemux-network
    restart: unless-stopped

  # ===================================================================
  # PROJECT MANAGEMENT PLANE
  # ===================================================================

  # Leantime - Status Authority
  leantime:
    image: leantime/leantime:latest
    container_name: dopemux-leantime
    ports:
      - "8080:8080"
    environment:
      LEAN_DB_HOST: mysql-leantime
      LEAN_DB_USER: ${MYSQL_USER:-leantime}
      LEAN_DB_PASSWORD: ${MYSQL_PASSWORD:-leantime_secure_2024}
      LEAN_DB_DATABASE: ${MYSQL_DATABASE:-leantime}
      LEAN_SESSION_PASSWORD: ${LEAN_SESSION_PASSWORD:-dopemux_session_secure_2024}
      LEAN_REDIS_URL: redis-leantime:6379
      LEAN_REDIS_AUTH: ${REDIS_PASSWORD:-dopemux_redis}
      LEAN_API_ENABLED: ${LEAN_API_ENABLED:-true}
    depends_on:
      - mysql-leantime
      - redis-leantime
    networks:
      - dopemux-network
    restart: unless-stopped

  # ===================================================================
  # MCP SERVERS - COGNITIVE PLANE
  # ===================================================================

  # Context7 - Documentation & API References (CRITICAL PATH)
  mcp-context7:
    build:
      context: ./docker/mcp-servers/context7
      dockerfile: Dockerfile
    container_name: dopemux-mcp-context7
    ports:
      - "3002:3002"
    environment:
      - CONTEXT7_API_KEY=${CONTEXT7_API_KEY}
      - CONTEXT7_ENDPOINT=${CONTEXT7_ENDPOINT}
      - MCP_SERVER_PORT=3002
    networks:
      - dopemux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || nc -z localhost 3002"]
      timeout: 10s
      retries: 3
      interval: 30s

  # Zen - Multi-model Orchestration (CRITICAL PATH)
  mcp-zen:
    build:
      context: ./docker/mcp-servers/zen
      dockerfile: Dockerfile
    container_name: dopemux-mcp-zen
    ports:
      - "3003:3003"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DISABLED_TOOLS=analyze,refactor,testgen,secaudit,docgen,tracer
      - DEFAULT_MODEL=auto
      - MCP_SERVER_PORT=3003
    networks:
      - dopemux-network
    restart: unless-stopped

  # ConPort - Decision Logging & Memory (CRITICAL PATH)
  mcp-conport:
    build:
      context: ./docker/mcp-servers/conport
      dockerfile: Dockerfile
    container_name: dopemux-mcp-conport
    ports:
      - "3004:3004"
    environment:
      - DATABASE_URL=postgresql://dopemux:${POSTGRES_PASSWORD:-dopemux_secure_2024}@postgres-primary:5432/conport
      - MCP_SERVER_PORT=3004
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VOYAGEAI_API_KEY=${VOYAGEAI_API_KEY}
    depends_on:
      - postgres-primary
    networks:
      - dopemux-network
    restart: unless-stopped

  # Serena LSP - Code Navigation (CRITICAL PATH)
  mcp-serena:
    build:
      context: ./docker/mcp-servers/serena
      dockerfile: Dockerfile
    container_name: dopemux-mcp-serena
    ports:
      - "3006:3006"
    environment:
      - MCP_SERVER_PORT=3006
    networks:
      - dopemux-network
    restart: unless-stopped

  # ===================================================================
  # MCP SERVERS - PROJECT MANAGEMENT PLANE
  # ===================================================================

  # Task Master AI - Task Decomposition (DISABLED: External dependency issues)
  # mcp-task-master-ai:
  #   build:
  #     context: ./docker/mcp-servers/task-master-ai
  #     dockerfile: Dockerfile
  #   container_name: dopemux-mcp-task-master-ai
  #   ports:
  #     - "3005:3005"
  #   environment:
  #     - MCP_SERVER_PORT=3005
  #     - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #   networks:
  #     - dopemux-network
  #   restart: unless-stopped

  # Leantime Bridge - PM Integration (TODO: Check after Leantime is running)
  # mcp-leantime-bridge:
  #   build:
  #     context: ./docker/mcp-servers/leantime-bridge
  #     dockerfile: Dockerfile
  #   container_name: dopemux-mcp-leantime-bridge
  #   ports:
  #     - "3015:3015"
  #   environment:
  #     - MCP_SERVER_PORT=3015
  #     - LEANTIME_API_URL=http://leantime:80
  #     - LEANTIME_API_TOKEN=${LEAN_MCP_TOKEN}
  #   depends_on:
  #     - leantime
  #   networks:
  #     - dopemux-network
  #   restart: unless-stopped

  # ===================================================================
  # COORDINATION LAYER - INTEGRATION BRIDGE
  # ===================================================================

  # Integration Bridge - Cross-Plane Communication
  integration-bridge:
    build:
      context: ./services/mcp-integration-bridge
      dockerfile: Dockerfile
    container_name: dopemux-integration-bridge
    ports:
      - "3016:3016"  # PORT_BASE + 16 as specified in architecture
    environment:
      - BRIDGE_PORT=3016
      - REDIS_URL=redis://redis-primary:6379
      - POSTGRES_URL=postgresql://dopemux:${POSTGRES_PASSWORD:-dopemux_secure_2024}@postgres-primary:5432/dopemux_unified
    depends_on:
      - redis-primary
      - postgres-primary
    networks:
      - dopemux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3016/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================================================
  # OPTIONAL EXTENDED SERVICES
  # ===================================================================

  # GPT-Researcher MCP
  mcp-gptr-mcp:
    build:
      context: ./docker/mcp-servers/gptr-mcp
      dockerfile: Dockerfile
    container_name: dopemux-mcp-gptr-mcp
    ports:
      - "3009:3009"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - MCP_SERVER_PORT=3009
    networks:
      - dopemux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3009/health || nc -z localhost 3009"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Claude Context Service
  mcp-claude-context:
    build:
      context: ./docker/mcp-servers/claude-context
      dockerfile: Dockerfile
    container_name: dopemux-mcp-claude-context
    ports:
      - "3007:3007"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VOYAGEAI_API_KEY=${VOYAGE_API_KEY}
      - MILVUS_ADDRESS=milvus-standalone:19530
      - MCP_SERVER_PORT=3007
    depends_on:
      - milvus-standalone
    networks:
      - dopemux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3007/health || nc -z localhost 3007"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================================================
  # MONITORING & MANAGEMENT
  # ===================================================================

  # Redis Commander - UI for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dopemux-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=primary:redis-primary:6379,leantime:redis-leantime:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dopemux_redis_2024}
      - HTTP_USER=admin
      - HTTP_PASSWORD=dopemux-redis-ui
    depends_on:
      - redis-primary
      - redis-leantime
    networks:
      - dopemux-network
    restart: unless-stopped

networks:
  dopemux-network:
    driver: bridge
    name: dopemux-unified-network

volumes:
  # Infrastructure
  redis_primary_data:
  redis_leantime_data:
  postgres_primary_data:
  mysql_leantime_data:

  # Vector Database
  milvus_etcd_data:
  milvus_minio_data:
  milvus_data:

  # MCP Server Caches
  mcp_context7_cache:
  mcp_conport_cache:
  mcp_serena_cache: