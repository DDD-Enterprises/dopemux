#!/bin/bash
# Dopemux Migration to Unified Architecture
# Consolidates fragmented Docker setup into single orchestration

set -e

echo "üéØ Dopemux Unified Migration Script"
echo "=====================================";

echo "‚ö†Ô∏è  This will stop all current containers and migrate to unified architecture"
read -p "Continue? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Migration cancelled."
    exit 1
fi

# Create backup directory
BACKUP_DIR="./backup/migration-$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo "üì¶ Creating backup of current configuration..."

# Backup current environment files
cp .env "$BACKUP_DIR/.env.backup" 2>/dev/null || echo "No .env found"
cp .env.conport "$BACKUP_DIR/.env.conport.backup" 2>/dev/null || echo "No .env.conport found"
cp .env.leantime "$BACKUP_DIR/.env.leantime.backup" 2>/dev/null || echo "No .env.leantime found"

# Backup current docker-compose files
find . -name "docker-compose*.yml" -exec cp {} "$BACKUP_DIR/" \;

echo "‚úÖ Backup created in $BACKUP_DIR"

echo "üõë Stopping all existing containers..."

# Stop all current dopemux containers
docker ps --filter "name=dopemux" --filter "name=mcp-" --filter "name=metamcp" -q | xargs -r docker stop
docker ps --filter "name=milvus" --filter "name=redis" --filter "name=leantime" -q | xargs -r docker stop

echo "üßπ Cleaning up old containers and networks..."

# Remove containers (but preserve volumes for data safety)
docker ps -a --filter "name=dopemux" --filter "name=mcp-" --filter "name=metamcp" -q | xargs -r docker rm
docker ps -a --filter "name=milvus" --filter "name=redis" --filter "name=leantime" -q | xargs -r docker rm

# Remove old networks
docker network ls --filter "name=mcp" --filter "name=dopemux" --filter "name=leantime" -q | xargs -r docker network rm 2>/dev/null || true

echo "üìù Setting up unified configuration..."

# Create scripts directory if it doesn't exist
mkdir -p ./scripts

# Copy unified environment configuration
if [ -f ".env.unified" ]; then
    echo "üîß Copying unified environment configuration..."
    echo "# Generated by migration script on $(date)" > .env
    echo "# Backup of original .env saved to $BACKUP_DIR" >> .env
    echo "" >> .env
    cat .env.unified >> .env
    echo "‚úÖ Unified .env created"
else
    echo "‚ùå .env.unified not found! Please ensure the unified configuration files exist."
    exit 1
fi

echo "üöÄ Starting unified architecture..."

# Start the unified system
if docker-compose -f docker-compose.unified.yml up -d; then
    echo "‚úÖ Unified architecture started successfully!"
else
    echo "‚ùå Failed to start unified architecture"
    echo "Check logs with: docker-compose -f docker-compose.unified.yml logs"
    exit 1
fi

echo "‚è≥ Waiting for services to start..."
sleep 10

echo "üîç Checking service health..."

# Check critical services
CRITICAL_SERVICES=("dopemux-redis-primary" "dopemux-postgres-primary" "dopemux-mcp-context7" "dopemux-mcp-zen" "dopemux-mcp-conport")

for service in "${CRITICAL_SERVICES[@]}"; do
    if docker ps --filter "name=$service" --filter "status=running" | grep -q "$service"; then
        echo "‚úÖ $service is running"
    else
        echo "‚ö†Ô∏è  $service is not running properly"
    fi
done

echo ""
echo "üéâ Migration Complete!"
echo "======================="
echo ""
echo "üåê Services are now available at:"
echo "  ‚Ä¢ Leantime (PM): http://localhost:8080"
echo "  ‚Ä¢ Redis Commander: http://localhost:8081"
echo "  ‚Ä¢ Minio Console: http://localhost:9001"
echo ""
echo "üîß MCP Servers running on ports 3002-3016:"
echo "  ‚Ä¢ Context7: 3002"
echo "  ‚Ä¢ Zen: 3003"
echo "  ‚Ä¢ ConPort: 3004"
echo "  ‚Ä¢ Task Master: 3005"
echo "  ‚Ä¢ Serena: 3006"
echo "  ‚Ä¢ Claude Context: 3007"
echo "  ‚Ä¢ GPT-R MCP: 3009"
echo "  ‚Ä¢ Leantime Bridge: 3015"
echo "  ‚Ä¢ Integration Bridge: 3016"
echo ""
echo "üìä Check status: docker-compose -f docker-compose.unified.yml ps"
echo "üìã View logs: docker-compose -f docker-compose.unified.yml logs [service_name]"
echo "üõë Stop all: docker-compose -f docker-compose.unified.yml down"
echo ""

# Check for any port conflicts
echo "üîç Checking for port conflicts..."
if netstat -tuln 2>/dev/null | grep -E ":(3002|3003|3004|3005|3006|3007|3009|3015|3016|5432|6379|6380|8080|8081|9000|9001|19530)" | grep LISTEN; then
    echo "‚ö†Ô∏è  Some ports might be in use by other services. Check above output."
else
    echo "‚úÖ No obvious port conflicts detected"
fi

echo ""
echo "üìö ADHD-Optimized Next Steps:"
echo "1. Verify MCP servers with: claude mcp list"
echo "2. Check ConPort context: curl http://localhost:3004/health"
echo "3. Test Integration Bridge: curl http://localhost:3016/health"
echo ""
echo "üíæ Your data backup is saved in: $BACKUP_DIR"