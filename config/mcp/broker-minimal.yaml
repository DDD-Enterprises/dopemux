# MetaMCP Broker Configuration - FULLY OPERATIONAL
# Evidence-based configuration using MCP_TOOL_AUDIT_COMPLETE.md
# All 7 servers operational with ADHD-optimized role mappings
# Last Updated: 2025-09-24 - Deployment SUCCESS

version: "1.0"
metadata:
  description: "Complete MetaMCP broker with all 7 operational servers"
  status: "FULLY_OPERATIONAL"
  servers_connected: "7/7 (100% utilization)"
  configuration_source: "Evidence-based from comprehensive tool audit"

broker:
  name: "dopemux-metamcp-broker-minimal"
  version: "1.0.0"
  host: "localhost"
  port: 8090
  max_concurrent_tools: 5
  tool_timeout_seconds: 30
  role_switch_timeout_seconds: 5
  health_check_interval: 60

# All healthy servers that are actually running
# Server priority mapping from MCP_TOOL_AUDIT_COMPLETE.md:
# ⭐⭐⭐⭐⭐ (Critical): context7, zen-mcp, sequential-thinking, task-master-ai, conport
# ⭐⭐⭐ (High): serena, exa, morphllm-fast-apply
servers:
  # Context7 (⭐⭐⭐⭐⭐) - ALWAYS FIRST for documentation and API references
  # Tools: Official documentation, 10,000+ libraries, trust scoring
  # Token Cost: VERY LOW | ADHD Benefit: Reduces documentation hunting
  # ADR-012 Compliance: Query before any code generation
  context7:
    transport: "http"
    url: "http://localhost:3002"
    startup_timeout: 10
    health_check:
      method: "health"
      endpoint: "/health"
      interval: 30

  # Task Master AI (⭐⭐⭐⭐⭐) - Task management and PRD processing
  # Tools: ADHD-optimized task chunking, Leantime integration
  # Token Cost: Medium | ADHD Benefit: Breaks large tasks into manageable chunks
  task-master-ai:
    transport: "http"
    url: "http://localhost:3005"
    startup_timeout: 12
    health_check:
      method: "health"
      endpoint: "/health"
      interval: 30

  # ConPort with async fixes - RUNNING (process health check)
  conport:
    transport: "http"
    url: "http://localhost:3004"
    startup_timeout: 10
    health_check:
      method: "ping"  # Use ping instead of HTTP health check
      interval: 30

  # AI reasoning - RUNNING (via stdio)
  sequential-thinking:
    transport: "stdio"
    command: ["docker", "exec", "-i", "mcp-mas-sequential-thinking", "python", "docker_server.py"]
    startup_timeout: 15
    health_check:
      method: "ping"
      interval: 45

  # Multi-model reasoning and analysis - HEALTHY (16 tools)
  zen-mcp:
    transport: "http"
    url: "http://localhost:3003"
    startup_timeout: 12
    health_check:
      method: "health"
      endpoint: "/health"
      interval: 30

  # Code navigation and memory - HEALTHY (process health check)
  serena:
    transport: "http"
    url: "http://localhost:3006"
    startup_timeout: 10
    health_check:
      method: "ping"  # Use ping instead of HTTP health check
      interval: 30

  # Search and web capabilities - HEALTHY
  exa:
    transport: "http"
    url: "http://localhost:3008"
    startup_timeout: 10
    health_check:
      method: "health"
      endpoint: "/health"
      interval: 30

  # Fast code transformations - HEALTHY (process health check)
  morphllm-fast-apply:
    transport: "http"
    url: "http://localhost:3011"
    startup_timeout: 12
    health_check:
      method: "ping"  # Use ping instead of HTTP health check
      interval: 30

  # GPT Researcher (⭐⭐⭐⭐) - Autonomous deep research and comprehensive reports
  # Tools: Web research, report generation, source validation, multi-agent research
  # Token Cost: High | ADHD Benefit: Reduces research fatigue with structured comprehensive reports
  gptr-mcp:
    transport: "http"
    url: "http://localhost:3009"
    startup_timeout: 15
    health_check:
      method: "health"
      endpoint: "/health"
      interval: 30

# Evidence-based role mappings from MCP_TOOL_AUDIT_COMPLETE.md
role_mappings:
  developer:
    # Core implementation tools (fast iteration, flow state)
    primary_servers: ["serena", "morphllm-fast-apply", "conport"]
    escalation_servers: ["zen-mcp", "sequential-thinking"]
    pre_warm: true
    max_tools: 5
    token_budget: 15000

  researcher:
    # Information gathering and exploration (controlled scope)
    primary_servers: ["gptr-mcp", "exa", "conport"]
    escalation_servers: ["zen-mcp", "sequential-thinking"]
    pre_warm: true
    max_tools: 5
    token_budget: 15000

  architect:
    # Deep analysis and complex reasoning (high-value tools)
    primary_servers: ["sequential-thinking", "zen-mcp"]
    escalation_servers: ["gptr-mcp", "conport", "task-master-ai"]
    pre_warm: true
    max_tools: 5
    token_budget: 25000

  planner:
    # Structured breakdown and organization
    primary_servers: ["task-master-ai", "zen-mcp", "conport"]
    escalation_servers: ["sequential-thinking"]
    pre_warm: true
    max_tools: 3
    token_budget: 10000

  reviewer:
    # Quality assurance and validation (systematic process)
    primary_servers: ["zen-mcp", "serena", "conport"]
    escalation_servers: ["sequential-thinking"]
    pre_warm: true
    max_tools: 5
    token_budget: 15000

  debugger:
    # Problem solving and investigation
    primary_servers: ["zen-mcp", "serena", "conport"]
    escalation_servers: ["sequential-thinking"]
    pre_warm: true
    max_tools: 4
    token_budget: 15000

  transformer:
    # Code transformations and bulk operations
    primary_servers: ["morphllm-fast-apply", "zen-mcp"]
    escalation_servers: ["serena", "conport"]
    pre_warm: true
    max_tools: 3
    token_budget: 8000

# Minimal monitoring
monitoring:
  metrics:
    enabled: false
  health:
    enabled: true
    endpoint: "/health"
  logging:
    level: "INFO"
    outputs:
      - type: "console"
        enabled: true

# Basic security
security:
  authentication:
    enabled: false  # Disable for initial testing
  access_control:
    enabled: true
    policy_file: "/config/mcp/policy.yaml"
  rate_limiting:
    enabled: false  # Disable for testing

# Essential features only
features:
  role_based_mounting: true
  budget_aware_hooks: false  # Disable for initial testing
  letta_integration: false
  adhd_optimizations: true

# Simple error handling
error_handling:
  tool_failures:
    max_consecutive_failures: 3
    fallback_behavior: "degrade_gracefully"